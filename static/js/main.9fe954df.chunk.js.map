{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","WarehouseDisplay","props","toggleStock","state","seeStock","setState","this","type","onClick","json","json_sample","data","Component","App","className","label","row","level","locations","name","stock","product","qty","replenishment","JSON","parse","stringify","forEach","element","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,kJCOrCC,G,wBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,YAAc,WACe,GAAvB,EAAKC,MAAMC,SACb,EAAKC,SAAS,CAAED,SAAU,IAE1B,EAAKC,SAAS,CAAED,SAAU,KAP5B,EAAKD,MAAQ,CAAEC,SAAU,GAFR,E,sEAcjB,OAA2B,GAAvBE,KAAKH,MAAMC,SAEX,6BACE,6CADF,cAEa,2BAAOG,KAAK,WAAWC,QAASF,KAAKJ,cAChD,kBAAC,IAAD,CAAYO,KAAMC,KAKpB,6BACQ,6CADR,cAEa,2BAAOH,KAAK,WAAWC,QAASF,KAAKJ,cAChD,kBAAC,IAAD,CAAYO,KAAME,S,GA5BGC,cA2ChBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QAOAJ,EAAc,CAClBK,MAAO,QACPC,IAAK,CACH,CACEC,MAAO,EACPC,UAAW,CACT,CACEC,KAAM,WACNC,MAAO,CACL,CACEC,QAAS,YACTC,IAAK,IACLC,cAAe,YAMzB,CACEN,MAAO,EACPC,UAAW,CACT,CACEC,KAAM,WACNC,MAAO,IAET,CACED,KAAM,WACNC,MAAO,CACL,CACEC,QAAS,kBACTC,IAAK,EACLC,cAAe,YAMzB,CACEN,MAAO,EACPC,UAAW,CACT,CACEC,KAAM,WACNC,MAAO,CACL,CACEC,QAAS,mBACTC,IAAK,EACLC,cAAe,cAIrB,CACEJ,KAAM,WACNC,MAAO,CACL,CACEC,QAAS,QACTC,IAAK,GACLC,cAAe,kBASzBZ,EAAOa,KAAKC,MAAMD,KAAKE,UAAUhB,IAEvBC,EAAKK,IAAIW,SAAQ,SAAAC,GAC7BA,EAAQV,UAAUS,SAAQ,SAAAC,UACjBA,EAAO,YC7GEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9fe954df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nimport JSONViewer from \"react-json-viewer\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass WarehouseDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { seeStock: 1 };\n  }\n\n  toggleStock = () => {\n    if (this.state.seeStock == 1) {\n      this.setState({ seeStock: 0 });\n    } else {\n      this.setState({ seeStock: 1 });\n    }\n  };\n\n  render() {\n    if (this.state.seeStock == 1) {\n      return (\n        <div>\n          <h1>Warehouse API</h1>\n          See stock? <input type=\"checkbox\" onClick={this.toggleStock} />\n          <JSONViewer json={json_sample} />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n                <h1>Warehouse API</h1>\n          See stock? <input type=\"checkbox\" onClick={this.toggleStock} />\n          <JSONViewer json={data} />\n        </div>\n      );\n    }\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WarehouseDisplay />\n    </div>\n  );\n}\n\nexport default App;\n\nconst json_sample = {\n  label: \"VZ-01\",\n  row: [\n    {\n      level: 1,\n      locations: [\n        {\n          name: \"VZ-01-01\",\n          stock: [\n            {\n              product: \"Left door\",\n              qty: 100,\n              replenishment: \"slow\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      level: 2,\n      locations: [\n        {\n          name: \"VZ-01-02\",\n          stock: []\n        },\n        {\n          name: \"VZ-02-02\",\n          stock: [\n            {\n              product: \"Rear brake disk\",\n              qty: 3,\n              replenishment: \"fast\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      level: 3,\n      locations: [\n        {\n          name: \"VZ-01-03\",\n          stock: [\n            {\n              product: \"Front brake disk\",\n              qty: 2,\n              replenishment: \"standard\"\n            }\n          ]\n        },\n        {\n          name: \"VZ-01-04\",\n          stock: [\n            {\n              product: \"Shock\",\n              qty: 10,\n              replenishment: \"standard\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n};\n\nlet data = JSON.parse(JSON.stringify(json_sample));\n\nlet nostock = data.row.forEach(element => {\n  element.locations.forEach(element => {\n    delete element[\"stock\"];\n  });\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}